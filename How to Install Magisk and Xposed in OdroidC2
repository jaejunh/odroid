
How to Install Magisk-v12.0.zip with Systemless Xposed to Odroid C2
---------------------------------------------------------------------------


===========================================================================
WARNING WARNING:  Following material includes a fair amount of knowledge in
unix commands, and it require you to operate a lot of disk operation
in terminal. If you are not comfortable with 'dd' or 'fdisk', please
stop here. 
===========================================================================
 

PART I:  INTRODUCTION
======================
1. Why did I do this?
- To use Magisk (systemless rooting or live modification to android)
  and to use Xposed Framework (such as fakeWifi)
- In my case, I need to circumvent many bank apps self test 
  (which impose more strict device compatibility and security test)
  Some bank apps check "rooting", "unlocking", and "wifi",
  all of which are nonsense for development board such as 
  odroid c2. :(


2. Should you try this?
- If you are willing to hack around your android device like me,
  please try.  Otherwise, for the security reason and safety of
  your android installation, it may not be a good idea.

3. What's the MAIN PROBLEM to install Magisk and Xposed Framework on odroid c2?
- First of all, c2 is dev board of BYO software.  It's not meant for 
  this kind at all. However, c2's android selfinstall.zip is "relatively easy" 
  to use, yet it has drawback, namely "not standardized" like Smart Phones'. 
  Which means we don't have wonderful custom recovery env like "TWRP" nor 
  "boot.img (with ramdisk)".
- That's a bit pain in the butt, but that's the trade-off that C2 users have to
  live with.

4. Is there any easier way to do this in Odoird C2?
- There has to be, yet I haven't found out. :(


PART II:  INSTALLATION
========================
4. Cut the crap.  Let's get into installation.
- WARNING. It could easily mass up your android installation 
  So backup your stuff or better to work on fresh android 6.0 + opengapps  installed
  odroid c2.   

 4.0 Preparation
 - [v] Get your fresh android 6.0 (marshmellow + opengapps) installed odroid c2.
 - [v] Download these files (not now, but later)
      [v]  system.txt  (extracted file list from odroid c2's system.img compile process) 
      [v]  Magisk-v12.0.zip    
      [v]  Material Design Xposed Installer 
      [v]  Xposed Framework (johnwu's systemless version)
 
 - [v]  Ubuntu PC and sdcard reader to create fake-boot.img 
 - [v]  blank usb disk (of any size > 64MB)
     

 4.1 Ubuntu PC:   Create fake-boot.img for your android.
 - Unplug your android emmc (or sdcard) from odroid c2 and
   put into Ubuntu via sdcard reader.   
 - Ubuntu will automatically mount 4 partitions(VFAT,rootsystem,cache,_data_) for you.
 - Now, Type this on your ubuntu terminal. Assuming your your-id is "john",

   # Let's make sure /rootsystem is mounted correctly
   $ ls /media/john/rootsystem
   

   # Now create temporary working directory to dump odroid root only
   # Then, create new ramdisk image
   $ sudo su -   
   $ rm -rf /tmp/root
   $ mkdir /tmp/root

   # system.txt located at http://github.com/jaejunh/odroid/system.txt 
   $ rsync -av --exclude-from 'system.txt' /media/john/rootsystem/ /tmp/root  

   $ cd /tmp/root
   $ find . | cpio -o -H newc | gzip > ../ramdisk.cpio.gz


  
   # Now make fake-boot.img
   # although fake and useless to actual boot, fake-boot.img needs at least one kernel image. 
   # Let's grap it from /media/john/VFAT
   $ cp /media/john/VFAT/Image* /tmp
   
   # Install abootimg ubuntu package
   $ sudo apt-get install abootimg

   # Everything's ready.  Let's make fake-boot.img
   $ abootimg --create /tmp/fake-boot.img -k /tmp/Image_android -r /tmp/ramdisk.cpio.gz 
   $ ls -l /tmp/fake-boot.img
   
   # if everything is OK, above will be create fake-boot.img around < 16MB+ size.
  
      
 4.2 Ubuntu PC:  Put your usb drive in Ubuntu.  Create usb (fake) boot partition.
   WARNING WARNING:  
   Please find your new usb device letter, and don't get mix up
   with our odroid sdcard reader.  In my case, emmc sdcard reader is /dev/sdd and
   new usb reader is /dev/sdX.
 
 - fdisk your 1st usb partition to hold 32MB. In my case, my usb device is /dev/sdX    

Disk /dev/sdX: 14.9 GiB, 15931539456 bytes, 31116288 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x3ad8cda9

Device     Boot Start   End Sectors Size Id Type
/dev/sdx1        2048 67583   65536  32M 83 Linux

  - You need to pad in '0xff' for any remaing free space for valid android boot parition.  
    
   # Thus, let's create the '0xff' filled 32MB binary image file with dd.
   $ cd /tmp
   $ dd if=/dev/zero ibs=1M count=32 | tr "\000" "\377" >paddedFile.bin
    
   # check it's correctly created. 
   $ hexdump -C paddedFile.bin  
   
   # Now copy in fake-root.img into paddedFile.bin
   $ dd if=fake-boot.img of=paddedFile.bin conv=notrunc
   
   # WARNING WARING!  Finally, dd paddedFile.bin into /dev/sdX1
   $ dd if=paddedFile.bin of=/dev/sdX1
   $ sync
   $ exit

   # eject your emmc, usb card



   
  - Congratulation. preparing fake boot parition of "ugly and hairy" is done!!  :)


 4.3 Odroid C2: Magisk root image extraction. 


  - Put your emmc and fake-boot usb drive into Odroid c2. 
  - To make life simple, disconnect any other usb drive/sdcard from Odroid C2.
  - And turn the power on your C2. Wait 2-3 min for your android boot, then, 
  - Download Magisk-V12.0.zip from the site,
    (https://forum.xda-developers.com/apps/magisk/official-magisk-v7-universal-systemless-t3473445)
  - The zip file will be placed in /sdcard/Download/Magisk-v12.0.zip 
  - open android terminal app, and type:
  
  $ su
  $ mount -o rw,remount /
  
  # first, you need to hide default sed with busybox's
  $ which sed
  $ mv /system/bin/sed /system/bin/sed.bad
  $ which sed

  # second, you need to create pseudo installation enviroment
  # make sure your usb's partition1 device is located at /dev/block/sda1 
  $ ls /dev/block/
  $ echo "BOOTIMAGE=/dev/block/sda1" > /dev/.magisk
  $ mkdir /dev/tmp/magisk -p
  $ cd /dev/tmp/magisk
  $ unzip /sdcard/Download/Magisk-v12.0.zip
  $ cp META-INF/com/google/android/update* .

  # now, run installer manually
  $ sh ./update-binary

  -if everything's OK, you would get newly updated 'fake-boot.img', and it would be rewritten to
   your usb drive, /dev/block/mmcblk1p1, yet your actual "rootsystem(/dev/block/mmcblk0p2)" 
   didn't get modified persistently (no file written except volatile /dev/tmp ramdisk). 
  
 - Fo fix this issue, what you need to install fake-boot.img's rootfs 
   ramdisk and partially update rootfs of /rootsystem.  Luckily, install process left
   that ramdisk in /dev/tmp/magisk/boottmp/ramdisk.cpio. let's make a copy to /storage/internal/ramdisk.cpio (1st VFAT partition)

  $ cp /dev/tmp/boottmp/ramdisk.cpio /storage/internal/
  $ rm /sdcard/Download/Magisk-v12.0.zip
  $ halt


  - Now you need to dump ramdisk.cpio into your android rootsystem. But doing lively is
    not good idea. Let's do it from Ubuntu PC. Power down your odroid C2, and unplug emmc(or sdcard) 
    and usb.  (You don't need usb anymore. bye bye, usb!)

 4.5 Ubuntu PC: Let's *manually* install Magisk root  

  - Put your emmc+sdcard reader into Ubuntu PC and open terminal.

  $ sudo su -
  $ mkdir /tmp/newroot
  $ cd /tmp/newroot
  $ cat /media/john/VFAT/ramdisk.cpio | cpio -i
  $ ls                         #newroot, or root part of new rootsystem
  $ ls /media/john/rootsystem  #oldroot, or all of old rootsystem
  
  # WARNING:  This is the final moment.  If you type following, it will permanently 
  # change your android rootsystem. If you don't want to, stop here.
  $ rsync -av /tmp/newroot/ /media/john/rootsystem
  $ cd .. && rm -rf /tmp/newroot
  $ sync
  $ exit

  - Now you have successfully installed Magisk into emmc/sdcard.    

 4.6 Odroid C2:  Check Magisk installation from Odroid C2. 
     
  - Put the emmc into C2, boot Android, you will find "Magisk Manager" app icon.
    Press it, and as soon as it start, it will ask you to "update Magisk Manager" from Play Store.
    Go ahead and update, then relaunch Magisk Manager. Main menu tells 
    Magisk Installed version, you are done and good to go  !!

  
 4.7 Ubuntu PC and Odroid C2: Now install Xposed Framework (systemless, Magisk friendly)
  - Brief sketch:
  - First, download and Material Design xposed installer to your Ubuntu PC.
    (file: XposedInstaller_by_dvdandroid_26_11_16.apk)
    (https://forum.xda-developers.com/xposed/material-design-xposed-installer-t3137758)
    Then, in Ubuntu terminal:

    $  adb install XposedInstaller_by_dvdandroid_26_11_16.apk


  - Second, Download xposed-v87.0-sdk23-topjohnwu.zip into your Odroid C2.  
    (https://forum.xda-developers.com/xposed/unofficial-systemless-xposed-t3388268)
    and install zip using odroid utility. It will take you to recovery, and reboot
    back.  When it get rebooted, it will rebuild all of "art/dalvik cache". It will take
    as least 10-20min, so be patient.
  
  - Third, check installation once bootup.  Launch Magisk Manager app and you will 
    find Xposed Module. Also,  launch Xposed Installer App and it will confirm you
    with Xposed is installed correctly. 

    
PART III:  HOW TO USE MAGISK AND XPOSED
========================================

 You can find many usage examples by googling, and I think it is beyond the scope
 of this document.  :)  In my case, I am using it to  'magiskhide' to trick
 many apps to detect my device's unlock and rooting status. 
 Also, I am using fakeWifi Xposed module for convenience (such as asphalt 8)
  


NOTE:
======
 You can probably try this method for odroid XU3/4.  But I haven't try it myself.
 Also, even with using Magisk, Odroid C2 won't get pass CTS test of google safetynet. 
 It just hide rooting and help you for majority of shallow
 level integrity check, which was sufficient for my case.  :)

I REALLY HOPE FOR ... 
==================================
 1. Can we have uboot + GPT + boot.img + TWRP
 2. Pass CTS Compliance Test for Google Saftynet   
 3. Store fake-boot.img (of the build process) into 
    SELFINSTALL.zip (maybe at VFAT or data partition)

 


  

   
    
  
 
  
  
 
   
    
    
